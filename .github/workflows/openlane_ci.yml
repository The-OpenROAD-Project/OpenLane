name: CI

# To run on the GCP replace all 'ubuntu-latest' with 'self-hosted'
on:
    # Runs on pushes to all but CID-latest-branches
    # CID-latest branches automatically create PRs, let's just let the tests run on those
    push:
      branches-ignore:
      - CID-latest-*
    # Runs on Pull Requests
    pull_request:
    # Runs every day at midnight UTC
    schedule:
      - cron:  '0 0 * * *'
    # Manual Dispatch
    workflow_dispatch:

jobs:
  docker-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # EXPORT BLOCK
      - name: Export Repo URL
        run: echo "REPO_URL=git://github.com/${{ github.repository }}.git" >> $GITHUB_ENV

      - name: Export PDK ROOT
        run: echo "PDK_ROOT=${{ github.workspace }}/pdks" >> $GITHUB_ENV

      - name: Export Branch Name
        run: echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Export First 5 Digits of Commit Hash # For optional use by later steps
        run: echo "COMMIT_SHA_5=$(echo ${{ github.sha }} | awk '{print substr($0,0,5)}')" >> $GITHUB_ENV

      - name: Export Pull Request ID Name (If PR)
        if: ${{ github.event_name == 'pull_request' }}
        run: echo "PULL_REQUEST_ID=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
      # END EXPORT BLOCK

      - name: Export Temp Image Name
        run: echo "IMAGE_NAME=openlane:intermediate" >> $GITHUB_ENV

      - name: Docker Build
        run: cd docker_build/ && make merge

      - name: Export Docker Image
        run: docker save -o /tmp/image.tar ${{ env.IMAGE_NAME }}

      - name: Upload Docker Image
        uses: actions/upload-artifact@v2
        with:
          name: docker-image
          path: /tmp/image.tar

  # Each test has two components: a fast test set and a more complete test set.
  # The fast test set is run on all PRs, etc. The complete test set runs on schedule.
  # The reason for this is that the entire complete set on one machine typically
  # times out the test.
  test:
    needs: docker-build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        testset: ["1", "2", "3", "4", "5"]
    name: Test Set ${{ matrix.testset }}
    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # EXPORT BLOCK
      - name: Export Repo URL
        run: echo "REPO_URL=git://github.com/${{ github.repository }}.git" >> $GITHUB_ENV

      - name: Export PDK ROOT
        run: echo "PDK_ROOT=${{ github.workspace }}/pdks" >> $GITHUB_ENV

      - name: Export Branch Name
        run: echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Export First 5 Digits of Commit Hash # For optional use by later steps
        run: echo "COMMIT_SHA_5=$(echo ${{ github.sha }} | awk '{print substr($0,0,5)}')" >> $GITHUB_ENV

      - name: Export Pull Request ID Name (If PR)
        if: ${{ github.event_name == 'pull_request' }}
        run: echo "PULL_REQUEST_ID=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
      # END EXPORT BLOCK

      - name: Export Temp Image Name
        run: echo "IMAGE_NAME=openlane:intermediate" >> $GITHUB_ENV

      - name: Download Docker Image
        uses: actions/download-artifact@v2
        with:
          name: docker-image
          path: /tmp

      - name: Import Docker Image
        run: docker load --input /tmp/image.tar

      - name: Export TOOL Name
        if: ${{ contains(github.ref, 'CID-latest-tools-') }}
        run: echo "TOOL=$(echo $BRANCH_NAME | sed 's/CID-latest-tools-//g' | sed 's/-.*//g'  )" >> $GITHUB_ENV

      - name: PDK installation
        run: cd ${GITHUB_WORKSPACE}/ && make pdk

      - name: Fastest Test Set
        env:
          TEST_SET: fastestTestSet${{ matrix.testset }}
        run: cd ${GITHUB_WORKSPACE}/ && python3 ${GITHUB_WORKSPACE}/.github/scripts/run_tests.py

      - name: Complete Test Set
        if: ${{ (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') }}
        env:
          TEST_SET: completeTestSet${{ matrix.testset }}
        run: cd ${GITHUB_WORKSPACE}/ && python3 ${GITHUB_WORKSPACE}/.github/scripts/run_tests.py
  cleanup:
    needs: test
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Delete Artifact
        uses: geekyeggo/delete-artifact@v1
        with:
          name: docker-image
  deploy:
      needs: test
      if: ${{ github.event_name != 'pull_request' }}
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # EXPORT BLOCK
      - name: Export Repo URL
        run: echo "REPO_URL=git://github.com/${{ github.repository }}.git" >> $GITHUB_ENV

      - name: Export PDK ROOT
        run: echo "PDK_ROOT=${{ github.workspace }}/pdks" >> $GITHUB_ENV

      - name: Export Branch Name
        run: echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Export First 5 Digits of Commit Hash # For optional use by later steps
        run: echo "COMMIT_SHA_5=$(echo ${{ github.sha }} | awk '{print substr($0,0,5)}')" >> $GITHUB_ENV

      - name: Export Pull Request ID Name (If PR)
        if: ${{ github.event_name == 'pull_request' }}
        run: echo "PULL_REQUEST_ID=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
      # END EXPORT BLOCK

      - name: Export Temp Image Name
        run: echo "IMAGE_NAME=openlane:intermediate" >> $GITHUB_ENV

      - name: Download Docker Image
        uses: actions/download-artifact@v2
        with:
          name: docker-image
          path: /tmp
      
      - name: Delete Artifact
        uses: geekyeggo/delete-artifact@v1
        with:
          name: docker-image

      - name: Import Docker Image
        run: docker load --input /tmp/image.tar

      - name: Write Main Branch
        run: |
          echo "MAIN_BRANCH=${{ secrets.MAIN_BRANCH }}" >> $GITHUB_ENV

      - name: Create Tag (If scheduled or dispatched)
        if: ${{ (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && env.BRANCH_NAME == env.MAIN_BRANCH }}
        run: cd ${GITHUB_WORKSPACE}/ && python3 ${GITHUB_WORKSPACE}/.github/scripts/generate_tag.py

      - name: Tag Commit (If scheduled or dispatched)
        if: ${{ (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && env.NEW_TAG != 'NO_NEW_TAG' }}
        uses: tvdias/github-tagger@v0.0.1
        with:
          tag: "${{ env.NEW_TAG }}"
          repo-token: "${{ secrets.MY_TOKEN }}"
      
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker Push (Branch Name)
        run: |
          TAG=${{ env.BRANCH_NAME }}
          if [ "$TAG" = "${{ secrets.MAIN_BRANCH }}" ]; then
            TAG=latest
          fi

          docker image tag ${{ env.IMAGE_NAME }} ${{ secrets.DOCKER_IMAGE }}:$TAG
          docker push ${{ secrets.DOCKER_IMAGE }}:$TAG

      - name: Docker Push (Tag) (If scheduled or dispatched)
        if: ${{ (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && env.NEW_TAG != 'NO_NEW_TAG' }}
        run: |
          docker image tag ${{ env.IMAGE_NAME }} ${{ secrets.DOCKER_IMAGE }}:${{ env.NEW_TAG }}
          docker image tag ${{ env.IMAGE_NAME }} ${{ secrets.DOCKER_IMAGE }}:current
          docker push ${{ secrets.DOCKER_IMAGE }}:${{ env.NEW_TAG }}
          docker push ${{ secrets.DOCKER_IMAGE }}:current
