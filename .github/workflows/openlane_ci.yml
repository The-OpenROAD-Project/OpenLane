name: CI

on:
    # Runs on Every Push
    push:
    # Runs on Pull Requests
    pull_request:
    # Runs every day at midnight UTC
    schedule:
      - cron:  '35 14 * * *'

jobs:
  docker-build:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        if: ${{ github.event.workflow_run.event != 'pull_request' || github.event.pull_request.head.repo.full_name == 'efabless/openlane' }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Export Branch Name
        run: echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Export Image Name General Case
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != 'efabless/openlane' }}
        run: echo "IMAGE_NAME=efabless/openlane:${{ env.BRANCH_NAME }}" >> $GITHUB_ENV


      - name: Export Pull Request ID Name To Environment
        if: ${{ github.event_name == 'pull_request' }}
        run: echo "PULL_REQUEST_ID=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
      
      - name: Export First 5 Digits of Commit Hash
        run: echo "COMMIT_SHA_5=$(echo ${{ github.sha }} | awk '{print substr($0,0,5)}')" >> $GITHUB_ENV

      - name: Export Image Name To Environment Internal PR Case
        if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == 'efabless/openlane' }}
        run: echo "IMAGE_NAME=efabless/openlane:${{ env.BRANCH_NAME }}-pull_request-${{ env.PULL_REQUEST_ID }}-${{ env.COMMIT_SHA_5 }} >> $GITHUB_ENV

      - name: Export TOOL Name
        if: ${{ github.event_name == 'schedule' && contains(github.ref, 'CID-latest-tool-') }}
        run: echo "TOOL=$(echo $BRANCH_NAME | sed 's/CID-latest-tools-//g')" >> $GITHUB_ENV

      - name: Update PDK
        if: ${{ github.event_name == 'schedule' && contains(github.ref, 'CID-latest-pdk') }}
        run: cd ${GITHUB_WORKSPACE}/ && bash ${GITHUB_WORKSPACE}/.github/scripts/updatePDK.sh

      - name: Update TOOL
        if: ${{ github.event_name == 'schedule' && contains(github.ref, 'CID-latest-tool-') }}
        run: cd ${GITHUB_WORKSPACE}/ && bash ${GITHUB_WORKSPACE}/.github/scripts/updateTool.sh

      - name: Reset Branch
        if: ${{ github.event_name == 'schedule' && contains(github.ref, 'CID-latest-') }}
        run: cd ${GITHUB_WORKSPACE}/ && bash ${GITHUB_WORKSPACE}/.github/scripts/resetBranch.sh

      - name: Update PDK
        if: ${{ github.event_name == 'schedule' && contains(github.ref, 'CID-latest-pdk') }}
        run: cd ${GITHUB_WORKSPACE}/ && bash ${GITHUB_WORKSPACE}/.github/scripts/updatePDK.sh

      - name: Update & Build TOOL
        if: ${{ github.event_name == 'schedule' && contains(github.ref, 'CID-latest-tool-') }}
        run: |
         cd ${GITHUB_WORKSPACE}/ && bash ${GITHUB_WORKSPACE}/.github/scripts/updateTool.sh
         cd ${GITHUB_WORKSPACE}/ && bash ${GITHUB_WORKSPACE}/.github/scripts/buildTool.sh

      - name: Docker Build
        run: cd docker_build/ && make merge

      - name: Docker Push
        if: ${{ github.event.workflow_run.event != 'pull_request' || github.event.pull_request.head.repo.full_name == 'efabless/openlane' }}
        run: docker push ${{ env.IMAGE_NAME }}

  test:
    needs: docker-build
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Export PDK ROOT
        run: echo "PDK_ROOT=${{ github.workspace }}/pdks" >> $GITHUB_ENV

      - name: Export Branch Name
        run: echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Export Image Name General Case
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != 'efabless/openlane' }}
        run: echo "IMAGE_NAME=efabless/openlane:${{ env.BRANCH_NAME }}" >> $GITHUB_ENV


      - name: Export Pull Request ID Name To Environment
        if: ${{ github.event_name == 'pull_request' }}
        run: echo "PULL_REQUEST_ID=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
      
      - name: Export First 5 Digits of Commit Hash
        run: echo "COMMIT_SHA_5=$(echo ${{ github.sha }} | awk '{print substr($0,0,5)}')" >> $GITHUB_ENV

      - name: Export Image Name To Environment Internal PR Case
        if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == 'efabless/openlane' }}
        run: echo "IMAGE_NAME=efabless/openlane:${{ env.BRANCH_NAME }}-pull_request-${{ env.PULL_REQUEST_ID }}-${{ env.COMMIT_SHA_5 }} >> $GITHUB_ENV

      - name: Export TOOL Name
        if: ${{ github.event_name == 'schedule' && contains(github.ref, 'CID-latest-tool-') }}
        run: echo "TOOL=$(echo $BRANCH_NAME | sed 's/CID-latest-tools-//g')" >> $GITHUB_ENV

      - name: Reset Branch
        if: ${{ github.event_name == 'schedule' && contains(github.ref, 'CID-latest-') }}
        run: cd ${GITHUB_WORKSPACE}/ && bash ${GITHUB_WORKSPACE}/.github/scripts/resetBranch.sh

      - name: Update PDK
        if: ${{ github.event_name == 'schedule' && contains(github.ref, 'CID-latest-pdk') }}
        run: cd ${GITHUB_WORKSPACE}/ && bash ${GITHUB_WORKSPACE}/.github/scripts/updatePDK.sh

      - name: Update & Build TOOL
        if: ${{ github.event_name == 'schedule' && contains(github.ref, 'CID-latest-tool-') }}
        run: |
         cd ${GITHUB_WORKSPACE}/ && bash ${GITHUB_WORKSPACE}/.github/scripts/updateTool.sh
         cd ${GITHUB_WORKSPACE}/ && bash ${GITHUB_WORKSPACE}/.github/scripts/buildTool.sh

      - name: Docker Pull
        run: cd ${GITHUB_WORKSPACE}/ && make openlane

      - name: PDK installation
        run: cd ${GITHUB_WORKSPACE}/ && make pdk

      - name: Run SPM
        env:
          EXTRA_FLAGS: -so
          TEST_SET: spm
        run: cd ${GITHUB_WORKSPACE}/ && bash ${GITHUB_WORKSPACE}/.github/scripts/test.sh

      - name: Fastest Test Set
        env:
          TEST_SET: fastestTestSet
        run: cd ${GITHUB_WORKSPACE}/ && bash ${GITHUB_WORKSPACE}/.github/scripts/test.sh

      - name: Complete Test Set
        if: ${{ github.event_name == 'schedule' && contains(github.ref, 'master') }}
        env:
          TEST_SET: completeTestSet
        run: cd ${GITHUB_WORKSPACE}/ && bash ${GITHUB_WORKSPACE}/.github/scripts/test.sh

      - name: Delete Docker Image if needed
        if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == 'efabless/openlane' }}
        env:
          SECRET_USER_NAME: ${{ secrets.DOCKERHUB_USER }}
          SECRET_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
        run: cd ${GITHUB_WORKSPACE}/ && bash ${GITHUB_WORKSPACE}/.github/scripts/deleteDockerImage.sh "$SECRET_USER_NAME "$SECRET_PASSWORD" > /dev/null 2>&1

      - name: Commit PDK Or Tool Updates
        if: ${{ github.event_name == 'schedule' && contains(github.ref, 'CID-latest-') }}
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          file_pattern: Makefile docs/source/*.md docker_build/docker/*/Dockerfile docker_build/tar/*.tar.gz
          commit_message: Apply automatic changes to PDK Or Tool
          # Optional commit user and author settings
          commit_user_name: My GitHub Actions Bot # defaults to "GitHub Actions"
          commit_user_email: my-github-actions-bot@example.org # defaults to "actions@github.com"

      - name: Export Tag If Possible
        if: ${{ github.event_name == 'schedule' && contains(github.ref, 'master') }}
        run: cd ${GITHUB_WORKSPACE}/ && bash ${GITHUB_WORKSPACE}/.github/scripts/generateTag.sh

      - name: Tag commit
        if: ${{ github.event_name == 'schedule' && contains(github.ref, 'master') && env.NEW_TAG != 'NO_NEW_TAG' }}
        uses: tvdias/github-tagger@v0.0.1
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          tag: "${{ env.NEW_TAG }}"
